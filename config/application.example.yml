server:
  # 配置启动端口号
  #port: 8000
  servlet:
    session:
      timeout: 259200000000
      cookie:
        max-age: 259200000000

########## log ##########
logging:
  level:
    org.core: debug
    org.api: debug
    org.oss: debug
    org.web: debug
    io.milton.common: off
  pattern:
    # 控制输出的格式
    #格式化输出：%d:表示日期    %thread:表示线程名     %-5level:级别从左显示5个字符宽度  %msg:日志消息    %n:是换行符
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss:SSS}){blue} %clr(%5p) %clr(%C.%M[%line]){cyan} [%thread] %msg%n"
    # 文件输出的格式
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger - %msg%n"
  file:
    # 日志文件名
    #    path: logs
    name: logs/${spring.application.name}.log
  logback:
    rollingpolicy:
      # 根据文件大小归档，超过5MB自动归档，次日启动服务时也会自动归档
      file-name-pattern: logs/%d{yyyy_MM_dd}/${spring.application.name}.out.log.%d{yyyy-MM-dd}.%i.gz
      # 日志最大大小
      max-file-size: 5MB
      # 要保留的日志备份的总大小
      total-size-cap: 200MB
      # 保存存档日志文件的最大天数(默认为7天)
      max-history: 7

#spring
spring:
  application:
    name: whale
    # config:
    # Development properties (also used for docker-compose)
    # import: optional:file:.env[.properties]
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
  output:
    ansi:
      enabled: always
  datasource:
    #引用项目中的数据库文件
    # mysql or h2
    driver-class-name: org.h2.Driver
    url: jdbc:h2:file:./data/db/db_data
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: ${application.config.log}
        show_sql: ${application.config.log}
  servlet:
    multipart:
      enabled: true
      # 设置 上传文件的大小
      max-file-size: 200MB
      # 设置 整个请求的大小
      max-request-size: 200MB
      # 设置上传文件位置
      # location: ./
  messages:
    encoding: UTF-8
    basename: i18n/messages
    # 使用本地系统对应资源文件
    fallback-to-system-locale: true
    # 设置本地默认语言
    # local: 读取本地语言
    # zh-CN: 中文-简
    # en-US: 英语-美
    default-language: local

# 文档配置
springdoc:
  api-docs:
    #是否开启文档功能
    enabled: true
    #swagger后端请求地址, 最好保持默认。knife4j不然会出现一些问题
    path: /v3/api-docs
  swagger-ui:
    #自定义swagger前端请求路径，输入http：127.0.0.1:8080/docs会自动重定向到swagger页面
    path: /docs
  #包扫描路径
  packages-to-scan: org.web
  pre-loading-enabled: true
knife4j:
  enable: true
  setting:
    language: zh_cn
    home-custom-path:
  cors: true

# mybatis-plus相关配置
mybatis-plus:
  # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  mapper-locations: classpath:mapper/*.xml
  # 以下配置均有默认值,可以不设置
  global-config:
    db-config:
      #主键类型 AUTO:"数据库ID自增" INPUT:"用户输入ID",ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: auto
      #驼峰下划线转换
      table-underline: true
  configuration:
    # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射
    map-underscore-to-camel-case: true
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl

# 查询大于有效页时，返回有效页最后一页
pagehelper:
  reasonable: true

# 对象存储
save-config:
  scan-filter:
    audio: mp3, wav, flac, aac, ogg, wma, m4a
    pic: jpg, jpeg, png, gif, bmp, tiff, tif, webp, svg, raw
    video: mp4, avi, mkv, mov, wmv, flv, webm, mpeg, rmvb
  # 保存模式
  save-mode: Local
  # 请求对象地址 (必须)
  # 可以使用多个地址，程序会自动合并成
  object-save:
    # - /test/music
    - /music
  # 保存地址，必须是对象地址中的值，顺序从0开始
  # 没有实现随机存储和自动选择最少对象的地址存储，因为存储的上传接口极其不稳定。最后放弃
  assign-object-save: 0
  img-save:
    # - /test/img
    - /img
  assign-img-save: 0
  mv-save:
    - /mv
  assign-mv-save: 0
  # 请求地址(必须)
  # 除非debug, 否则不要填写localhost and 127.0.0.1. 这样会造成只能本地访问
  host: ./data/storage
  # 账户(根据使用模式填写)
  access-key: admin
  # 密码(必须)
  secret-key: LLq9quPO

jwt-config:
  seed-key: ad419e9df4fe41ea1c20bee247a28dce6df8c7cd84c642qw3de5b37bf3e5ec5c
  # token 1天
  expire-time: 86_400_000
  # 刷新token 30天
  refresh-key: 2_592_000_000

file-type:
  suffix:
    - mp3
    - ogg
    - flac

# 网络请求配置
http-request:
  # 超时设置，最好设置大一些。否则上传文件很容易超时
  timeout: 60_000
  # 上传缓存目录
  temp-path: ./data/cache

# web前端路径映射
web-mapping:
  path: /web/index.html

# 默认参数
default-info:
  # 保存时，自动简繁转换
  # default 不自动, 默认保存
  # cn 所有名字自动保存简体
  # tc 所有名字自动保存繁体
  name:
    artist: default
    music: default
    album: default
  pic:
    # 如果封面没有值则返回此链接, 支持http和本地资源
    # 冗余默认封面地址
    default-pic: /assets/default.png
    # 音乐没有封面则默认使用此链接
    music-pic: /assets/music.png
    # 歌单默认封面
    play-list-pic: /assets/playlist.png
    # 专辑默认封面
    album-pic: /assets/album.png
    # 歌手默认封面
    artist-pic: /assets/artist.png
    # 用户默认头像
    user-avatar-pic: /assets/user.png
    # 用户默认背景
    user-background-pic: /assets/user-background.jpg

application:
  config:
    plugin: false
    log: false
  enable:
    admin-application: true
    n-music-application: false
    subsonic-application: false
    webdav-application: false

# subsonic 资源多个资源返回策略:
# first:第一个 last: 最后一个
# bitRateMax:最大比特率 bitRateMin:最小比特率
# sizeMax:最大文件 sizeMin:最小文件
subsonic:
  resource:
    return-plan: first

# webdav 资源多个资源返回策略:
# first:第一个 last: 最后一个
# bitRateMax:最大比特率 bitRateMin:最小比特率
# sizeMax:最大文件 sizeMin:最小文件
webdav:
  resource:
    return-plan: first

upload:
  music-name-template: "{music}-{album}-[{artist}]-{rate}"